<?php

/** @noinspection PhpUnused */
/** @noinspection PhpUnusedLocalVariableInspection */

declare(strict_types=1);
// Autogenerated with DRAKON Editor 


function n20_Valid_Parentheses(string $s) {
    // item 32
    /*
    
    Given a string s containing just the characters 
    '(', ')', '{', '}', '[' and ']', 
    determine if the input string is valid.
    
    An input string is valid if:
    
    Open brackets must be closed 
    by the same type of brackets.
    Open brackets must be closed 
    in the correct order.
    Every close bracket has a corresponding 
    open bracket of the same type.
    
    Example:
    
    Input: $s = "([][])"
    Output: true
    
    */
    // item 12
    $sLen = strlen($s);
    
    $ret = true;
    // item 13
    if (even($sLen)) {
        // item 34
        $mapColsed = [
        	')' => '(',
        	'}' => '{',
        	']' => '['
        ];
        // item 18
        $iLen = strlen($s);
        // item 190001
        $i = 0;
        while (true) {
            // item 190002
            if ($i < $iLen) {
                
            } else {
                break;
            }
            // item 33
            $char = $s[$i];
            // item 21
            if (in_array($char, $mapColsed)) {
                // item 24
                if ((!empty($stack)) && (array_pop($stack) === $mapColsed[$char])) {
                    // item 30
                    $ret = false;
                    break;
                } else {
                    
                }
            } else {
                // item 31
                // символ является открывающей скобкой
                
                array_push($stack, $char);
            }
            // item 190003
            $i++;
        }
    } else {
        // item 16
        $ret = false;
    }
    // item 17
    return $ret;
}

function n20_Valid_Parentheses_Test() {
    // item 11
    $res = n20_Valid_Parentheses('[');
    
    assert($res === false);
    
    $res = n20_Valid_Parentheses('[(');
    
    assert($res === false);
    
    $res = n20_Valid_Parentheses('[()]');
    
    assert($res === true);
}



